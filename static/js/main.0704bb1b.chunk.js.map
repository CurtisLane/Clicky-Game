{"version":3,"sources":["components/pages/Home.js","components/common/card/Card.js","components/header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","className","children","Card","id","name","image","handleClick","gameOver","wonRound","handleIncrement","handleRandomize","handleGameover","onClick","src","alt","Header","message","score","highScore","round","href","App","state","characters","Characters","selected","previousRound","randomize","characterArr","i","length","j","Math","floor","random","setState","indexOf","concat","updatedScore","handleGameWin","this","randomCharacters","map","character","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"4hEAaeA,MAXf,SAAcC,GAEV,OACI,yBAAKC,UAAU,sBACX,yBAAKA,UAAU,OACdD,EAAME,Y,MCWJC,MAff,YAAqH,IAAtGC,EAAqG,EAArGA,GAAIC,EAAiG,EAAjGA,KAAMC,EAA2F,EAA3FA,MAAOC,EAAoF,EAApFA,YAAuBC,GAA6D,EAAvEC,SAAuE,EAA7DD,UACnD,OADgH,EAAnDE,gBAAmD,EAAlCC,gBAAkC,EAAjBC,eAE3F,yBAAKX,UAAU,uBAEX,yBAAKA,UAAW,SAAuB,IAAbO,EAAoB,SAAW,IAAKK,QAAS,kBAAMN,EAAYH,KACrF,yBAAKH,UAAU,iBACX,yBAAKA,UAAU,iCAAiCa,IAAKR,EAAOS,IAAKV,Q,aCgBtEW,MAtBf,YAAyE,IAAxDC,EAAuD,EAAvDA,QAASC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,MAAOZ,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,SACzD,OAEI,yBAAKR,UAAW,6CAA+CO,EAAW,gBAAkBC,EAAW,eAAiB,aACpH,uBAAGR,UAAU,uCAAuCoB,KAAK,KAAzD,uBAEA,yBAAKpB,UAAU,wCACX,gCAASgB,GAAW,mEAGxB,yBAAKhB,UAAU,uCAAuCG,GAAG,eAErD,0BAAMH,UAAU,eAAhB,UACYiB,EADZ,iBACiCC,EADjC,aACsDC,MCkHvDE,E,4MAzHbC,MAAQ,CACNC,WAAYC,EACZC,SAAU,GACVR,MAAO,EACPC,UAAW,EACXF,QAAS,GACTG,MAAO,EACPO,cAAe,EACflB,UAAU,EACVD,UAAU,G,EAGZoB,UAAY,SAAAC,GACV,IAAK,IAAIC,EAAID,EAAaE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAChD,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADQ,EAEX,CAACD,EAAaG,GAAIH,EAAaC,IAAnED,EAAaC,GAFkC,KAE9BD,EAAaG,GAFiB,KAIlD,OAAOH,G,EAGTtB,YAAc,SAAAH,GACZ,EAAKgC,SAAS,CAAE3B,UAAU,EAAOD,UAAU,KACF,IAArC,EAAKe,MAAMG,SAASW,QAAQjC,IAAc,EAAKmB,MAAML,MAAQ,KAAO,GACtE,EAAKR,kBACL,EAAK0B,SAAS,CAAEV,SAAU,EAAKH,MAAMG,SAASY,OAAOlC,MAErD,EAAKQ,kB,EAITF,gBAAkB,WAChB,IAAM6B,EAAe,EAAKhB,MAAML,MAAQ,EACxC,EAAKkB,SAAS,CACZlB,MAAOqB,EACPtB,QAAS,KAEPsB,GAAgB,EAAKhB,MAAMJ,WAC7B,EAAKiB,SAAS,CAAEjB,UAAWoB,IAEzB,EAAKhB,MAAMH,MAAQ,EAAKG,MAAMI,eAAkBY,EAAe,EAAKhB,MAAMJ,WAAc,EAAKI,MAAMJ,WACrG,EAAKiB,SAAS,CAAEjB,UAAW,EAAKI,MAAMJ,UAAY,IAE/B,KAAjBoB,GACF,EAAKC,gBAEP,EAAK7B,mB,EAGP6B,cAAgB,WACd,EAAKJ,SAAS,CACZV,SAAU,GACVR,MAAO,EACPD,QAAS,iCACTG,MAAO,EAAKG,MAAMH,MAAQ,EAC1BO,cAAe,EAAKJ,MAAMH,MAAQ,EAClCX,UAAU,IACT,WACDgC,KAAKL,SAAS,CACZV,SAAU,QAGd,EAAKf,mB,EAGPC,eAAiB,WACf,EAAKwB,SAAS,CACZV,SAAU,GACVR,MAAO,EACPE,MAAO,EACPO,cAAe,EACfR,UAAW,EAAKI,MAAMJ,UACtBF,QAAS,qDACTT,UAAU,IAEZ,EAAKG,mB,EAGPA,gBAAkB,WAChB,IAAI+B,EAAmB,EAAKd,UAAUH,GACtC,EAAKW,SAAS,CAAEZ,WAAYkB,K,kEAI5BD,KAAK9B,oB,+BAGE,IAAD,OAEN,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,CACEgB,QAAWwB,KAAKlB,MAAMN,QACtBC,MAASuB,KAAKlB,MAAML,MACpBC,UAAasB,KAAKlB,MAAMJ,UACxBC,MAASqB,KAAKlB,MAAMH,MACpBZ,SAAYiC,KAAKlB,MAAMf,SACvBC,SAAYgC,KAAKlB,MAAMd,WAEzB,kBAAC,EAAD,KACGgC,KAAKlB,MAAMC,WAAWmB,KAAI,SAAAC,GAAS,OAClC,kBAAC,EAAD,CACExC,GAAMwC,EAAUxC,GAChBC,KAAQuC,EAAUvC,KAClBC,MAASsC,EAAUtC,MACnBG,SAAY,EAAKc,MAAMd,SACvBD,SAAY,EAAKe,MAAMf,SACvBqC,IAAOD,EAAUxC,GACjBG,YAAe,EAAKA,YACpBG,gBAAmB,EAAKA,gBACxBC,gBAAmB,EAAKA,gBACxBC,eAAkB,EAAKA,0B,GAhHnBkC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM/C,c","file":"static/js/main.0704bb1b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Home(props) {\r\n\r\n    return (\r\n        <div className='home-div container'>\r\n            <div className='row'>\r\n            {props.children}\r\n            </div>\r\n        </div>\r\n    )    \r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport './Card.css'\r\n\r\nfunction Card({id, name, image, handleClick, wonRound, gameOver, handleIncrement, handleRandomize, handleGameover}) {\r\n    return(\r\n        <div className='col-4 col-md-3 my-3'>\r\n\r\n            <div className={'card' + (gameOver === true ? ' shake' : '')} onClick={() => handleClick(id)}>\r\n                <div className='img-container'>\r\n                    <img className='card-img-top img-fluid rounded' src={image} alt={name} />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport './header.css'\r\n\r\nfunction Header({message, score, highScore, round, gameOver, wonRound}) {\r\n    return(\r\n\r\n        <nav className={\"navbar navbar-expand-lg navbar-light row \" + (gameOver ? 'blink-bg-lose' : wonRound ? 'blink-bg-win' : 'bg-light')}>\r\n            <a className=\"navbar-brand col-12 col-lg-2 mt-lg-0\" href=\"/\">Avatar Clicky Game!</a>\r\n\r\n            <div className=\"mx-auto col-12 col-lg-6 mt-2 mt-lg-0\">\r\n                <strong>{message || 'Click any image to start but DON\\'T click the same image twice!'}</strong>\r\n            </div>\r\n            \r\n            <div className=\"ml-auto col-12 col-lg-4 mt-1 mt-lg-0\" id=\"navbar-text\">\r\n            \r\n                <span className=\"navbar-text\">\r\n                    Score: {score} | Top Score: {highScore} | Round: {round}\r\n                </span>\r\n\r\n            </div>\r\n                \r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header","import React, {Component} from 'react';\nimport './App.css';\nimport Home from './components/pages/Home';\nimport Card from './components/common/card/Card'\nimport Characters from './characters.json'\nimport Header from './components/header/Header';\n\nclass App extends Component {\n\n  state = {\n    characters: Characters,\n    selected: [],\n    score: 0,\n    highScore: 0,\n    message: '',\n    round: 1,\n    previousRound: 1,\n    wonRound: false,\n    gameOver: false\n  }\n\n  randomize = characterArr => {\n    for (let i = characterArr.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [characterArr[i], characterArr[j]] = [characterArr[j], characterArr[i]];\n    }\n    return characterArr;\n  };\n\n  handleClick = id => {\n    this.setState({ wonRound: false, gameOver: false})\n    if (this.state.selected.indexOf(id) === -1 || this.state.score % 12 === 0) {\n      this.handleIncrement();\n      this.setState({ selected: this.state.selected.concat(id) });\n    } else {\n      this.handleGameover();\n    }\n  };\n\n  handleIncrement = () => {\n    const updatedScore = this.state.score + 1;\n    this.setState({\n      score: updatedScore,\n      message: \"\"\n    });\n    if (updatedScore >= this.state.highScore) {\n      this.setState({ highScore: updatedScore });\n    }\n    if (this.state.round > this.state.previousRound && (updatedScore + this.state.highScore) >= this.state.highScore ){\n      this.setState({ highScore: this.state.highScore + 1})\n    }\n    if (updatedScore === 12) {\n      this.handleGameWin()\n    }\n    this.handleRandomize();\n  };\n\n  handleGameWin = () => {\n    this.setState({ \n      selected: [],\n      score: 0,\n      message: \"You got them all!! Great work!\",\n      round: this.state.round + 1,\n      previousRound: this.state.round - 1,\n      wonRound: true\n    }, function(){\n      this.setState({\n        selected: []\n      })\n    });\n    this.handleRandomize();\n  }\n\n  handleGameover = () => {\n    this.setState({\n      selected: [],\n      score: 0,\n      round: 1,\n      previousRound: 1,\n      highScore: this.state.highScore,\n      message: 'Game Over! Select any character card to try again.',\n      gameOver: true\n    });\n    this.handleRandomize();\n  };\n\n  handleRandomize = () => {\n    let randomCharacters = this.randomize(Characters);\n    this.setState({ characters: randomCharacters });\n  };\n\n  componentDidMount(){\n    this.handleRandomize()\n  }\n  \n  render(){\n\n    return (\n      <div className=\"App\">\n        <Header \n          message = {this.state.message}\n          score = {this.state.score}\n          highScore = {this.state.highScore}\n          round = {this.state.round}\n          gameOver = {this.state.gameOver}\n          wonRound = {this.state.wonRound}\n        />\n        <Home>\n          {this.state.characters.map(character => (\n            <Card \n              id = {character.id}  \n              name = {character.name}  \n              image = {character.image}\n              wonRound = {this.state.wonRound}\n              gameOver = {this.state.gameOver}\n              key = {character.id}\n              handleClick = {this.handleClick}\n              handleIncrement = {this.handleIncrement}\n              handleRandomize = {this.handleRandomize}\n              handleGameover = {this.handleGameover}\n            />\n          ))}\n        </Home>\n      </div>\n    );\n\n  }\n  \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}